{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Unity Vibe CLI Batch Commands",
  "description": "Schema for Unity Vibe CLI batch command files",
  "type": "object",
  "properties": {
    "version": {
      "type": "string",
      "description": "Batch file format version",
      "default": "1.0"
    },
    "description": {
      "type": "string",
      "description": "Optional description of this batch"
    },
    "commands": {
      "type": "array",
      "description": "Array of commands to execute sequentially",
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/createSceneCommand"
          },
          {
            "$ref": "#/definitions/addCanvasCommand"
          },
          {
            "$ref": "#/definitions/addPanelCommand"
          },
          {
            "$ref": "#/definitions/addButtonCommand"
          },
          {
            "$ref": "#/definitions/addTextCommand"
          }
        ]
      },
      "minItems": 1
    }
  },
  "required": ["commands"],
  "definitions": {
    "createSceneCommand": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "const": "create-scene"
        },
        "name": {
          "type": "string",
          "description": "Name of the scene to create"
        },
        "path": {
          "type": "string",
          "description": "Directory path where scene will be created",
          "default": "Assets/Scenes"
        },
        "type": {
          "type": "string",
          "enum": ["Empty", "DefaultGameObjects", "2D", "3D", "URP", "HDRP"],
          "default": "DefaultGameObjects"
        },
        "addToBuild": {
          "type": "boolean",
          "description": "Whether to add scene to build settings",
          "default": false
        }
      },
      "required": ["action", "name"],
      "additionalProperties": false
    },
    "addCanvasCommand": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "const": "add-canvas"
        },
        "name": {
          "type": "string",
          "description": "Name for the canvas GameObject"
        },
        "scene": {
          "type": "string",
          "description": "Target scene name (optional, uses current scene if not specified)"
        },
        "renderMode": {
          "type": "string",
          "enum": ["ScreenSpaceOverlay", "ScreenSpaceCamera", "WorldSpace"],
          "default": "ScreenSpaceOverlay"
        },
        "referenceWidth": {
          "type": "integer",
          "minimum": 1,
          "default": 1920
        },
        "referenceHeight": {
          "type": "integer",
          "minimum": 1,
          "default": 1080
        },
        "scaleMode": {
          "type": "string",
          "enum": ["ConstantPixelSize", "ScaleWithScreenSize", "ConstantPhysicalSize"],
          "default": "ScaleWithScreenSize"
        },
        "sortingOrder": {
          "type": "integer",
          "default": 0
        },
        "worldPosition": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 3,
          "maxItems": 3,
          "description": "Position for WorldSpace canvas [x, y, z]"
        }
      },
      "required": ["action", "name"],
      "additionalProperties": false
    },
    "addPanelCommand": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "const": "add-panel"
        },
        "name": {
          "type": "string",
          "description": "Name for the panel GameObject"
        },
        "parent": {
          "type": "string",
          "description": "Parent GameObject name (auto-detects canvas if not specified)"
        },
        "scene": {
          "type": "string",
          "description": "Target scene name (optional)"
        },
        "width": {
          "type": "number",
          "minimum": 1,
          "default": 200
        },
        "height": {
          "type": "number",
          "minimum": 1,
          "default": 200
        },
        "anchor": {
          "type": "string",
          "enum": [
            "TopLeft", "TopCenter", "TopRight",
            "MiddleLeft", "MiddleCenter", "MiddleRight", 
            "BottomLeft", "BottomCenter", "BottomRight"
          ],
          "default": "MiddleCenter"
        },
        "position": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 2,
          "maxItems": 3,
          "description": "Position offset [x, y] or [x, y, z]"
        }
      },
      "required": ["action", "name"],
      "additionalProperties": false
    },
    "addButtonCommand": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "const": "add-button"
        },
        "name": {
          "type": "string",
          "description": "Name for the button GameObject"
        },
        "parent": {
          "type": "string",
          "description": "Parent GameObject name (auto-detects canvas if not specified)"
        },
        "scene": {
          "type": "string",
          "description": "Target scene name (optional)"
        },
        "text": {
          "type": "string",
          "default": "Button",
          "description": "Text to display on button"
        },
        "width": {
          "type": "number",
          "minimum": 1,
          "default": 160
        },
        "height": {
          "type": "number",
          "minimum": 1,
          "default": 30
        },
        "anchor": {
          "type": "string",
          "enum": [
            "TopLeft", "TopCenter", "TopRight",
            "MiddleLeft", "MiddleCenter", "MiddleRight",
            "BottomLeft", "BottomCenter", "BottomRight"
          ],
          "default": "MiddleCenter"
        },
        "position": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 2,
          "maxItems": 3,
          "description": "Position offset [x, y] or [x, y, z]"
        }
      },
      "required": ["action", "name"],
      "additionalProperties": false
    },
    "addTextCommand": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "const": "add-text"
        },
        "name": {
          "type": "string",
          "description": "Name for the text GameObject"
        },
        "parent": {
          "type": "string",
          "description": "Parent GameObject name (auto-detects canvas if not specified)"
        },
        "scene": {
          "type": "string",
          "description": "Target scene name (optional)"
        },
        "text": {
          "type": "string",
          "default": "New Text",
          "description": "Text content to display"
        },
        "fontSize": {
          "type": "integer",
          "minimum": 1,
          "default": 14
        },
        "width": {
          "type": "number",
          "minimum": 1,
          "default": 200
        },
        "height": {
          "type": "number",
          "minimum": 1,
          "default": 50
        },
        "anchor": {
          "type": "string",
          "enum": [
            "TopLeft", "TopCenter", "TopRight",
            "MiddleLeft", "MiddleCenter", "MiddleRight",
            "BottomLeft", "BottomCenter", "BottomRight"
          ],
          "default": "MiddleCenter"
        },
        "position": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 2,
          "maxItems": 3,
          "description": "Position offset [x, y] or [x, y, z]"
        },
        "color": {
          "type": "string",
          "pattern": "^#[0-9A-Fa-f]{6}([0-9A-Fa-f]{2})?$",
          "description": "Text color in hex format (#RRGGBB or #RRGGBBAA)"
        }
      },
      "required": ["action", "name"],
      "additionalProperties": false
    }
  }
}